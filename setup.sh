#!/bin/bash

##########################################################################################
# Configuration (these values depend on the operating systems, change these accordingly) #
##########################################################################################
INSTALL_COMMAND="zypper in"

####################################
# Helper functions and definitions #
####################################

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_color() {
    local color="$1"
    local message="$2"
    echo -e "${color}${message}${NC}"
}

print_error() {
    local message="$1"
    echo -e "${RED}${message}${NC}" >&2
}

# Exit the program with a message and exit code 1
exit_error() {
    local message="$1"
    print_error "${message}"
    exit 1
}

#########################################################
# Constant values (probably don't need to change those) #
#########################################################
PROGRAMS="git stow alacritty wezterm fastfetch neovim tmux zsh bat eza zoxide"

##################
# Startup checks #
##################

# Check if script is run as root
if [ "$(id -u)" != "0" ]; then
    exit_error "This script must be run as root (sudo)."
fi

#################################
# Install all required programs #
#################################
print_color $CYAN "--- Installing programs ---"

print_color $GREEN "Installing system packages ..."
$INSTALL_COMMAND $PROGRAMS

print_color $GREEN "Installing homebrew..."
NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

print_color $GREEN "Installing oh-my-posh ..."
curl -s https://ohmyposh.dev/install.sh | bash -s -- -d /usr/local/bin

print_color $GREEN "Installing spicetify-cli ..."
curl -fsSL https://raw.githubusercontent.com/spicetify/cli/main/install.sh | sh

print_color $GREEN "Installing oh-my-zsh ..."
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
# Remove the .zshrc generated by oh-my-zsh
rm -f ~/.zshrc

####################
# Get the dotfiles #
####################
print_color $CYAN "--- Getting the dotfiles ---"

# Check if git was installed successfully
if ! command -v git > /dev/null; then
    exit_error "\"git\" command not found, the script failed to install it previously."
fi

# Check if stow was installed successfully
if ! command -v stow > /dev/null; then
    exit_error "\"stow\" command not found, the script failed to install it previously."
fi

# Check if ~/dotfiles directory exists
if [ -d ~/dotfiles ]; then
    exit_error "\"~/dotfiles\" directory already exists."
fi

# Clone the repository
git clone https://github.com/GHaxZ/dotfiles.git ~/dotfiles || exit_error "Failed cloning dotfiles git repository."

# Stow the dotfiles
(cd ~/dotfiles && stow .) || exit_error "Failed stowing the dotfiles directory."

####################
# Set up oh-my-zsh #
####################
print_color $CYAN "--- Setting up oh-my-zsh ---"

print_color $GREEN "Setting up zsh-syntax-highlighting ..."
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting || print_error "Failed setting up zsh-syntax-highlighting."

###############
# Set up tmux #
###############
print_color $CYAN "--- Setting up tmux ---"

print_color $GREEN "Setting up tpm ..."
if git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm; then
    tmux source ~/.config/tmux/tmux.conf
else
    print_error "Failed setting up tpm."
fi

####################
# Set up spicetify #
####################
print_color $CYAN "--- Setting up spicetify ---"

if command -v spicetify > /dev/null; then
    # Check for flatpak spotify install, in which case we need to change some permissions
    if [ -d "/var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify/" ]; then
        chmod a+wr /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify
        chmod a+wr -R /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify/Apps
    fi

    if ! spicetify backup apply; then
        print_error "Failed setting up spicetify."
        print_error "The spicetify setup can vary vastly depending on how you installed Spotify."
        print_error "Check out the official guide to fix your issues."
    fi
else
    print_error "\"spicetify\" command not found, the script failed to install it previously."
    print_error "The spicetify setup can vary vastly depending on how you installed Spotify."
    print_error "Check out the official guide to fix your issues."
fi
